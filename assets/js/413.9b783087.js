(window.webpackJsonp=window.webpackJsonp||[]).push([[413],{715:function(t,a,s){"use strict";s.r(a);var e=s(25),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"faq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[t._v("#")]),t._v(" FAQ")]),t._v(" "),a("h2",{attrs:{id:"集群新增节点、下线节点需要重启集群吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群新增节点、下线节点需要重启集群吗"}},[t._v("#")]),t._v(" 集群新增节点、下线节点需要重启集群吗？")]),t._v(" "),a("p",[t._v("当集群新增节点时候，只需要新增的节点配置已启动集群节点的任一IP,即可完成集群的动态接入，无需重源节点机器")]),t._v(" "),a("h2",{attrs:{id:"fluxmq同一个clientid集群中可以重复连接吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fluxmq同一个clientid集群中可以重复连接吗"}},[t._v("#")]),t._v(" FluxMQ同一个ClientID集群中可以重复连接吗？")]),t._v(" "),a("p",[t._v("FluxMQ默认同一集群采用互踢策略，一个ClientID同一时间只允许一个在线，后者会将前者剔除下线")]),t._v(" "),a("h2",{attrs:{id:"部署集群安全组需要打开哪些端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署集群安全组需要打开哪些端口"}},[t._v("#")]),t._v(" 部署集群安全组需要打开哪些端口？")]),t._v(" "),a("ul",[a("li",[t._v("48880 集群eventbus内部通信端口")]),t._v(" "),a("li",[t._v("48500 缓存同步端口")]),t._v(" "),a("li",[t._v("47100 集群内部通信端口")])]),t._v(" "),a("h2",{attrs:{id:"支持proxy-protocol透传客户端ip等信息吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持proxy-protocol透传客户端ip等信息吗"}},[t._v("#")]),t._v(" 支持proxy_protocol透传客户端ip等信息吗？")]),t._v(" "),a("p",[t._v("FluxMQ支持开启proxy_protocol解析，解析后的连接的ip会自动被proxy_protocol头携带的源IP覆盖")]),t._v(" "),a("div",{staticClass:"language-YAML extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mqtt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tcp配置")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1887")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mqtt端口号")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("wiretap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 二进制日志 前提是 logLevel = DEBUG")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("messageMaxSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4194304")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 接收消息的最大限制 默认4194304(4M)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认false, 支持HAProxy协议解析  ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("SO_BACKLOG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);